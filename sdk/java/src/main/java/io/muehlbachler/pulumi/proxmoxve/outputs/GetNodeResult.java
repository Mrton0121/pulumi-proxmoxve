// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNodeResult {
    /**
     * @return The CPU count on the node.
     * 
     */
    private Integer cpuCount;
    /**
     * @return The CPU model on the node.
     * 
     */
    private String cpuModel;
    /**
     * @return The CPU utilization on the node.
     * 
     */
    private Integer cpuSockets;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The memory available on the node.
     * 
     */
    private Integer memoryAvailable;
    /**
     * @return The total memory on the node.
     * 
     */
    private Integer memoryTotal;
    /**
     * @return The memory used on the node.
     * 
     */
    private Integer memoryUsed;
    private String nodeName;
    /**
     * @return The uptime in seconds on the node.
     * 
     */
    private Integer uptime;

    private GetNodeResult() {}
    /**
     * @return The CPU count on the node.
     * 
     */
    public Integer cpuCount() {
        return this.cpuCount;
    }
    /**
     * @return The CPU model on the node.
     * 
     */
    public String cpuModel() {
        return this.cpuModel;
    }
    /**
     * @return The CPU utilization on the node.
     * 
     */
    public Integer cpuSockets() {
        return this.cpuSockets;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The memory available on the node.
     * 
     */
    public Integer memoryAvailable() {
        return this.memoryAvailable;
    }
    /**
     * @return The total memory on the node.
     * 
     */
    public Integer memoryTotal() {
        return this.memoryTotal;
    }
    /**
     * @return The memory used on the node.
     * 
     */
    public Integer memoryUsed() {
        return this.memoryUsed;
    }
    public String nodeName() {
        return this.nodeName;
    }
    /**
     * @return The uptime in seconds on the node.
     * 
     */
    public Integer uptime() {
        return this.uptime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer cpuCount;
        private String cpuModel;
        private Integer cpuSockets;
        private String id;
        private Integer memoryAvailable;
        private Integer memoryTotal;
        private Integer memoryUsed;
        private String nodeName;
        private Integer uptime;
        public Builder() {}
        public Builder(GetNodeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cpuCount = defaults.cpuCount;
    	      this.cpuModel = defaults.cpuModel;
    	      this.cpuSockets = defaults.cpuSockets;
    	      this.id = defaults.id;
    	      this.memoryAvailable = defaults.memoryAvailable;
    	      this.memoryTotal = defaults.memoryTotal;
    	      this.memoryUsed = defaults.memoryUsed;
    	      this.nodeName = defaults.nodeName;
    	      this.uptime = defaults.uptime;
        }

        @CustomType.Setter
        public Builder cpuCount(Integer cpuCount) {
            if (cpuCount == null) {
              throw new MissingRequiredPropertyException("GetNodeResult", "cpuCount");
            }
            this.cpuCount = cpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder cpuModel(String cpuModel) {
            if (cpuModel == null) {
              throw new MissingRequiredPropertyException("GetNodeResult", "cpuModel");
            }
            this.cpuModel = cpuModel;
            return this;
        }
        @CustomType.Setter
        public Builder cpuSockets(Integer cpuSockets) {
            if (cpuSockets == null) {
              throw new MissingRequiredPropertyException("GetNodeResult", "cpuSockets");
            }
            this.cpuSockets = cpuSockets;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNodeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder memoryAvailable(Integer memoryAvailable) {
            if (memoryAvailable == null) {
              throw new MissingRequiredPropertyException("GetNodeResult", "memoryAvailable");
            }
            this.memoryAvailable = memoryAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder memoryTotal(Integer memoryTotal) {
            if (memoryTotal == null) {
              throw new MissingRequiredPropertyException("GetNodeResult", "memoryTotal");
            }
            this.memoryTotal = memoryTotal;
            return this;
        }
        @CustomType.Setter
        public Builder memoryUsed(Integer memoryUsed) {
            if (memoryUsed == null) {
              throw new MissingRequiredPropertyException("GetNodeResult", "memoryUsed");
            }
            this.memoryUsed = memoryUsed;
            return this;
        }
        @CustomType.Setter
        public Builder nodeName(String nodeName) {
            if (nodeName == null) {
              throw new MissingRequiredPropertyException("GetNodeResult", "nodeName");
            }
            this.nodeName = nodeName;
            return this;
        }
        @CustomType.Setter
        public Builder uptime(Integer uptime) {
            if (uptime == null) {
              throw new MissingRequiredPropertyException("GetNodeResult", "uptime");
            }
            this.uptime = uptime;
            return this;
        }
        public GetNodeResult build() {
            final var _resultValue = new GetNodeResult();
            _resultValue.cpuCount = cpuCount;
            _resultValue.cpuModel = cpuModel;
            _resultValue.cpuSockets = cpuSockets;
            _resultValue.id = id;
            _resultValue.memoryAvailable = memoryAvailable;
            _resultValue.memoryTotal = memoryTotal;
            _resultValue.memoryUsed = memoryUsed;
            _resultValue.nodeName = nodeName;
            _resultValue.uptime = uptime;
            return _resultValue;
        }
    }
}
