// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Apt_standard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRepositoryResult {
    /**
     * @return The description of the APT standard repository.
     * 
     */
    private String description;
    /**
     * @return The absolute path of the source list file that contains this standard repository.
     * 
     */
    private String filePath;
    /**
     * @return The handle of the APT standard repository.
     * 
     */
    private String handle;
    /**
     * @return The unique identifier of this APT standard repository data source.
     * 
     */
    private String id;
    /**
     * @return The index within the defining source list file.
     * 
     */
    private Integer index;
    /**
     * @return The name of the APT standard repository.
     * 
     */
    private String name;
    /**
     * @return The name of the target Proxmox VE node.
     * 
     */
    private String node;
    /**
     * @return Indicates the activation status.
     * 
     */
    private Integer status;

    private GetRepositoryResult() {}
    /**
     * @return The description of the APT standard repository.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The absolute path of the source list file that contains this standard repository.
     * 
     */
    public String filePath() {
        return this.filePath;
    }
    /**
     * @return The handle of the APT standard repository.
     * 
     */
    public String handle() {
        return this.handle;
    }
    /**
     * @return The unique identifier of this APT standard repository data source.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The index within the defining source list file.
     * 
     */
    public Integer index() {
        return this.index;
    }
    /**
     * @return The name of the APT standard repository.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The name of the target Proxmox VE node.
     * 
     */
    public String node() {
        return this.node;
    }
    /**
     * @return Indicates the activation status.
     * 
     */
    public Integer status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String filePath;
        private String handle;
        private String id;
        private Integer index;
        private String name;
        private String node;
        private Integer status;
        public Builder() {}
        public Builder(GetRepositoryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.filePath = defaults.filePath;
    	      this.handle = defaults.handle;
    	      this.id = defaults.id;
    	      this.index = defaults.index;
    	      this.name = defaults.name;
    	      this.node = defaults.node;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder filePath(String filePath) {
            if (filePath == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "filePath");
            }
            this.filePath = filePath;
            return this;
        }
        @CustomType.Setter
        public Builder handle(String handle) {
            if (handle == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "handle");
            }
            this.handle = handle;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder index(Integer index) {
            if (index == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "index");
            }
            this.index = index;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder node(String node) {
            if (node == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "node");
            }
            this.node = node;
            return this;
        }
        @CustomType.Setter
        public Builder status(Integer status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "status");
            }
            this.status = status;
            return this;
        }
        public GetRepositoryResult build() {
            final var _resultValue = new GetRepositoryResult();
            _resultValue.description = description;
            _resultValue.filePath = filePath;
            _resultValue.handle = handle;
            _resultValue.id = id;
            _resultValue.index = index;
            _resultValue.name = name;
            _resultValue.node = node;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
