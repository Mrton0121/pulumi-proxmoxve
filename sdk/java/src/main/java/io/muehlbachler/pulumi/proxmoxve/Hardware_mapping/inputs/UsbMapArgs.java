// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Hardware_mapping.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UsbMapArgs extends com.pulumi.resources.ResourceArgs {

    public static final UsbMapArgs Empty = new UsbMapArgs();

    /**
     * The comment of the mapped USB device.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return The comment of the mapped USB device.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The ID of the map.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The ID of the map.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The node name of the map.
     * 
     */
    @Import(name="node", required=true)
    private Output<String> node;

    /**
     * @return The node name of the map.
     * 
     */
    public Output<String> node() {
        return this.node;
    }

    /**
     * The path of the map. For hardware mappings of type USB the path is optional and indicates that the device is mapped through the device ID instead of ports.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The path of the map. For hardware mappings of type USB the path is optional and indicates that the device is mapped through the device ID instead of ports.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    private UsbMapArgs() {}

    private UsbMapArgs(UsbMapArgs $) {
        this.comment = $.comment;
        this.id = $.id;
        this.node = $.node;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UsbMapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UsbMapArgs $;

        public Builder() {
            $ = new UsbMapArgs();
        }

        public Builder(UsbMapArgs defaults) {
            $ = new UsbMapArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment The comment of the mapped USB device.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment The comment of the mapped USB device.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param id The ID of the map.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the map.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param node The node name of the map.
         * 
         * @return builder
         * 
         */
        public Builder node(Output<String> node) {
            $.node = node;
            return this;
        }

        /**
         * @param node The node name of the map.
         * 
         * @return builder
         * 
         */
        public Builder node(String node) {
            return node(Output.of(node));
        }

        /**
         * @param path The path of the map. For hardware mappings of type USB the path is optional and indicates that the device is mapped through the device ID instead of ports.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path of the map. For hardware mappings of type USB the path is optional and indicates that the device is mapped through the device ID instead of ports.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        public UsbMapArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("UsbMapArgs", "id");
            }
            if ($.node == null) {
                throw new MissingRequiredPropertyException("UsbMapArgs", "node");
            }
            return $;
        }
    }

}
