// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Hardware_mapping.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PciMapArgs extends com.pulumi.resources.ResourceArgs {

    public static final PciMapArgs Empty = new PciMapArgs();

    /**
     * The comment of the mapped PCI device.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return The comment of the mapped PCI device.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The ID of the map.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The ID of the map.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The IOMMU group of the map. Not mandatory for the Proxmox VE API call, but causes a PCI hardware mapping to be incomplete when not set
     * 
     */
    @Import(name="iommuGroup")
    private @Nullable Output<Integer> iommuGroup;

    /**
     * @return The IOMMU group of the map. Not mandatory for the Proxmox VE API call, but causes a PCI hardware mapping to be incomplete when not set
     * 
     */
    public Optional<Output<Integer>> iommuGroup() {
        return Optional.ofNullable(this.iommuGroup);
    }

    /**
     * The node name of the map.
     * 
     */
    @Import(name="node", required=true)
    private Output<String> node;

    /**
     * @return The node name of the map.
     * 
     */
    public Output<String> node() {
        return this.node;
    }

    /**
     * The path of the map.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The path of the map.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * The subsystem ID group of the map. Not mandatory for the Proxmox VE API call, but causes a PCI hardware mapping to be incomplete when not set
     * 
     */
    @Import(name="subsystemId")
    private @Nullable Output<String> subsystemId;

    /**
     * @return The subsystem ID group of the map. Not mandatory for the Proxmox VE API call, but causes a PCI hardware mapping to be incomplete when not set
     * 
     */
    public Optional<Output<String>> subsystemId() {
        return Optional.ofNullable(this.subsystemId);
    }

    private PciMapArgs() {}

    private PciMapArgs(PciMapArgs $) {
        this.comment = $.comment;
        this.id = $.id;
        this.iommuGroup = $.iommuGroup;
        this.node = $.node;
        this.path = $.path;
        this.subsystemId = $.subsystemId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PciMapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PciMapArgs $;

        public Builder() {
            $ = new PciMapArgs();
        }

        public Builder(PciMapArgs defaults) {
            $ = new PciMapArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment The comment of the mapped PCI device.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment The comment of the mapped PCI device.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param id The ID of the map.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the map.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param iommuGroup The IOMMU group of the map. Not mandatory for the Proxmox VE API call, but causes a PCI hardware mapping to be incomplete when not set
         * 
         * @return builder
         * 
         */
        public Builder iommuGroup(@Nullable Output<Integer> iommuGroup) {
            $.iommuGroup = iommuGroup;
            return this;
        }

        /**
         * @param iommuGroup The IOMMU group of the map. Not mandatory for the Proxmox VE API call, but causes a PCI hardware mapping to be incomplete when not set
         * 
         * @return builder
         * 
         */
        public Builder iommuGroup(Integer iommuGroup) {
            return iommuGroup(Output.of(iommuGroup));
        }

        /**
         * @param node The node name of the map.
         * 
         * @return builder
         * 
         */
        public Builder node(Output<String> node) {
            $.node = node;
            return this;
        }

        /**
         * @param node The node name of the map.
         * 
         * @return builder
         * 
         */
        public Builder node(String node) {
            return node(Output.of(node));
        }

        /**
         * @param path The path of the map.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path of the map.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param subsystemId The subsystem ID group of the map. Not mandatory for the Proxmox VE API call, but causes a PCI hardware mapping to be incomplete when not set
         * 
         * @return builder
         * 
         */
        public Builder subsystemId(@Nullable Output<String> subsystemId) {
            $.subsystemId = subsystemId;
            return this;
        }

        /**
         * @param subsystemId The subsystem ID group of the map. Not mandatory for the Proxmox VE API call, but causes a PCI hardware mapping to be incomplete when not set
         * 
         * @return builder
         * 
         */
        public Builder subsystemId(String subsystemId) {
            return subsystemId(Output.of(subsystemId));
        }

        public PciMapArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("PciMapArgs", "id");
            }
            if ($.node == null) {
                throw new MissingRequiredPropertyException("PciMapArgs", "node");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("PciMapArgs", "path");
            }
            return $;
        }
    }

}
