// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Hardware_mapping.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.muehlbachler.pulumi.proxmoxve.Hardware_mapping.inputs.PciMapArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PciState extends com.pulumi.resources.ResourceArgs {

    public static final PciState Empty = new PciState();

    /**
     * The comment of the mapped PCI device.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return The comment of the mapped PCI device.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The actual map of devices for the PCI hardware mapping.
     * 
     */
    @Import(name="maps")
    private @Nullable Output<List<PciMapArgs>> maps;

    /**
     * @return The actual map of devices for the PCI hardware mapping.
     * 
     */
    public Optional<Output<List<PciMapArgs>>> maps() {
        return Optional.ofNullable(this.maps);
    }

    /**
     * Indicates whether to enable mediated devices.
     * 
     */
    @Import(name="mediatedDevices")
    private @Nullable Output<Boolean> mediatedDevices;

    /**
     * @return Indicates whether to enable mediated devices.
     * 
     */
    public Optional<Output<Boolean>> mediatedDevices() {
        return Optional.ofNullable(this.mediatedDevices);
    }

    /**
     * The name of this PCI hardware mapping.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of this PCI hardware mapping.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private PciState() {}

    private PciState(PciState $) {
        this.comment = $.comment;
        this.maps = $.maps;
        this.mediatedDevices = $.mediatedDevices;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PciState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PciState $;

        public Builder() {
            $ = new PciState();
        }

        public Builder(PciState defaults) {
            $ = new PciState(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment The comment of the mapped PCI device.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment The comment of the mapped PCI device.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param maps The actual map of devices for the PCI hardware mapping.
         * 
         * @return builder
         * 
         */
        public Builder maps(@Nullable Output<List<PciMapArgs>> maps) {
            $.maps = maps;
            return this;
        }

        /**
         * @param maps The actual map of devices for the PCI hardware mapping.
         * 
         * @return builder
         * 
         */
        public Builder maps(List<PciMapArgs> maps) {
            return maps(Output.of(maps));
        }

        /**
         * @param maps The actual map of devices for the PCI hardware mapping.
         * 
         * @return builder
         * 
         */
        public Builder maps(PciMapArgs... maps) {
            return maps(List.of(maps));
        }

        /**
         * @param mediatedDevices Indicates whether to enable mediated devices.
         * 
         * @return builder
         * 
         */
        public Builder mediatedDevices(@Nullable Output<Boolean> mediatedDevices) {
            $.mediatedDevices = mediatedDevices;
            return this;
        }

        /**
         * @param mediatedDevices Indicates whether to enable mediated devices.
         * 
         * @return builder
         * 
         */
        public Builder mediatedDevices(Boolean mediatedDevices) {
            return mediatedDevices(Output.of(mediatedDevices));
        }

        /**
         * @param name The name of this PCI hardware mapping.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of this PCI hardware mapping.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public PciState build() {
            return $;
        }
    }

}
