// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.VM.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineDiskSpeedArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineDiskSpeedArgs Empty = new VirtualMachineDiskSpeedArgs();

    /**
     * The maximum read I/O in operations per second
     * 
     */
    @Import(name="iopsRead")
    private @Nullable Output<Integer> iopsRead;

    /**
     * @return The maximum read I/O in operations per second
     * 
     */
    public Optional<Output<Integer>> iopsRead() {
        return Optional.ofNullable(this.iopsRead);
    }

    /**
     * The maximum unthrottled read I/O pool in operations per second
     * 
     */
    @Import(name="iopsReadBurstable")
    private @Nullable Output<Integer> iopsReadBurstable;

    /**
     * @return The maximum unthrottled read I/O pool in operations per second
     * 
     */
    public Optional<Output<Integer>> iopsReadBurstable() {
        return Optional.ofNullable(this.iopsReadBurstable);
    }

    /**
     * The maximum write I/O in operations per second
     * 
     */
    @Import(name="iopsWrite")
    private @Nullable Output<Integer> iopsWrite;

    /**
     * @return The maximum write I/O in operations per second
     * 
     */
    public Optional<Output<Integer>> iopsWrite() {
        return Optional.ofNullable(this.iopsWrite);
    }

    /**
     * The maximum unthrottled write I/O pool in operations per second
     * 
     */
    @Import(name="iopsWriteBurstable")
    private @Nullable Output<Integer> iopsWriteBurstable;

    /**
     * @return The maximum unthrottled write I/O pool in operations per second
     * 
     */
    public Optional<Output<Integer>> iopsWriteBurstable() {
        return Optional.ofNullable(this.iopsWriteBurstable);
    }

    /**
     * The maximum read speed in megabytes per second
     * 
     */
    @Import(name="read")
    private @Nullable Output<Integer> read;

    /**
     * @return The maximum read speed in megabytes per second
     * 
     */
    public Optional<Output<Integer>> read() {
        return Optional.ofNullable(this.read);
    }

    /**
     * The maximum burstable read speed in megabytes per second
     * 
     */
    @Import(name="readBurstable")
    private @Nullable Output<Integer> readBurstable;

    /**
     * @return The maximum burstable read speed in megabytes per second
     * 
     */
    public Optional<Output<Integer>> readBurstable() {
        return Optional.ofNullable(this.readBurstable);
    }

    /**
     * The maximum write speed in megabytes per second
     * 
     */
    @Import(name="write")
    private @Nullable Output<Integer> write;

    /**
     * @return The maximum write speed in megabytes per second
     * 
     */
    public Optional<Output<Integer>> write() {
        return Optional.ofNullable(this.write);
    }

    /**
     * The maximum burstable write speed in megabytes per second
     * 
     */
    @Import(name="writeBurstable")
    private @Nullable Output<Integer> writeBurstable;

    /**
     * @return The maximum burstable write speed in megabytes per second
     * 
     */
    public Optional<Output<Integer>> writeBurstable() {
        return Optional.ofNullable(this.writeBurstable);
    }

    private VirtualMachineDiskSpeedArgs() {}

    private VirtualMachineDiskSpeedArgs(VirtualMachineDiskSpeedArgs $) {
        this.iopsRead = $.iopsRead;
        this.iopsReadBurstable = $.iopsReadBurstable;
        this.iopsWrite = $.iopsWrite;
        this.iopsWriteBurstable = $.iopsWriteBurstable;
        this.read = $.read;
        this.readBurstable = $.readBurstable;
        this.write = $.write;
        this.writeBurstable = $.writeBurstable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineDiskSpeedArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineDiskSpeedArgs $;

        public Builder() {
            $ = new VirtualMachineDiskSpeedArgs();
        }

        public Builder(VirtualMachineDiskSpeedArgs defaults) {
            $ = new VirtualMachineDiskSpeedArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param iopsRead The maximum read I/O in operations per second
         * 
         * @return builder
         * 
         */
        public Builder iopsRead(@Nullable Output<Integer> iopsRead) {
            $.iopsRead = iopsRead;
            return this;
        }

        /**
         * @param iopsRead The maximum read I/O in operations per second
         * 
         * @return builder
         * 
         */
        public Builder iopsRead(Integer iopsRead) {
            return iopsRead(Output.of(iopsRead));
        }

        /**
         * @param iopsReadBurstable The maximum unthrottled read I/O pool in operations per second
         * 
         * @return builder
         * 
         */
        public Builder iopsReadBurstable(@Nullable Output<Integer> iopsReadBurstable) {
            $.iopsReadBurstable = iopsReadBurstable;
            return this;
        }

        /**
         * @param iopsReadBurstable The maximum unthrottled read I/O pool in operations per second
         * 
         * @return builder
         * 
         */
        public Builder iopsReadBurstable(Integer iopsReadBurstable) {
            return iopsReadBurstable(Output.of(iopsReadBurstable));
        }

        /**
         * @param iopsWrite The maximum write I/O in operations per second
         * 
         * @return builder
         * 
         */
        public Builder iopsWrite(@Nullable Output<Integer> iopsWrite) {
            $.iopsWrite = iopsWrite;
            return this;
        }

        /**
         * @param iopsWrite The maximum write I/O in operations per second
         * 
         * @return builder
         * 
         */
        public Builder iopsWrite(Integer iopsWrite) {
            return iopsWrite(Output.of(iopsWrite));
        }

        /**
         * @param iopsWriteBurstable The maximum unthrottled write I/O pool in operations per second
         * 
         * @return builder
         * 
         */
        public Builder iopsWriteBurstable(@Nullable Output<Integer> iopsWriteBurstable) {
            $.iopsWriteBurstable = iopsWriteBurstable;
            return this;
        }

        /**
         * @param iopsWriteBurstable The maximum unthrottled write I/O pool in operations per second
         * 
         * @return builder
         * 
         */
        public Builder iopsWriteBurstable(Integer iopsWriteBurstable) {
            return iopsWriteBurstable(Output.of(iopsWriteBurstable));
        }

        /**
         * @param read The maximum read speed in megabytes per second
         * 
         * @return builder
         * 
         */
        public Builder read(@Nullable Output<Integer> read) {
            $.read = read;
            return this;
        }

        /**
         * @param read The maximum read speed in megabytes per second
         * 
         * @return builder
         * 
         */
        public Builder read(Integer read) {
            return read(Output.of(read));
        }

        /**
         * @param readBurstable The maximum burstable read speed in megabytes per second
         * 
         * @return builder
         * 
         */
        public Builder readBurstable(@Nullable Output<Integer> readBurstable) {
            $.readBurstable = readBurstable;
            return this;
        }

        /**
         * @param readBurstable The maximum burstable read speed in megabytes per second
         * 
         * @return builder
         * 
         */
        public Builder readBurstable(Integer readBurstable) {
            return readBurstable(Output.of(readBurstable));
        }

        /**
         * @param write The maximum write speed in megabytes per second
         * 
         * @return builder
         * 
         */
        public Builder write(@Nullable Output<Integer> write) {
            $.write = write;
            return this;
        }

        /**
         * @param write The maximum write speed in megabytes per second
         * 
         * @return builder
         * 
         */
        public Builder write(Integer write) {
            return write(Output.of(write));
        }

        /**
         * @param writeBurstable The maximum burstable write speed in megabytes per second
         * 
         * @return builder
         * 
         */
        public Builder writeBurstable(@Nullable Output<Integer> writeBurstable) {
            $.writeBurstable = writeBurstable;
            return this;
        }

        /**
         * @param writeBurstable The maximum burstable write speed in megabytes per second
         * 
         * @return builder
         * 
         */
        public Builder writeBurstable(Integer writeBurstable) {
            return writeBurstable(Output.of(writeBurstable));
        }

        public VirtualMachineDiskSpeedArgs build() {
            return $;
        }
    }

}
