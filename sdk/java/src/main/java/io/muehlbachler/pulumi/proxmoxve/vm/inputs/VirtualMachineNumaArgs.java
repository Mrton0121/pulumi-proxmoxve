// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.VM.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineNumaArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineNumaArgs Empty = new VirtualMachineNumaArgs();

    /**
     * The CPU cores to assign to the NUMA node (format is `0-7;16-31`).
     * 
     */
    @Import(name="cpus", required=true)
    private Output<String> cpus;

    /**
     * @return The CPU cores to assign to the NUMA node (format is `0-7;16-31`).
     * 
     */
    public Output<String> cpus() {
        return this.cpus;
    }

    /**
     * The device (defaults to `socket`).
     * - `/dev/*` - A host serial device.
     * 
     */
    @Import(name="device", required=true)
    private Output<String> device;

    /**
     * @return The device (defaults to `socket`).
     * - `/dev/*` - A host serial device.
     * 
     */
    public Output<String> device() {
        return this.device;
    }

    /**
     * The NUMA host nodes.
     * 
     */
    @Import(name="hostnodes")
    private @Nullable Output<String> hostnodes;

    /**
     * @return The NUMA host nodes.
     * 
     */
    public Optional<Output<String>> hostnodes() {
        return Optional.ofNullable(this.hostnodes);
    }

    /**
     * The VGA memory in megabytes (defaults to `16`).
     * 
     */
    @Import(name="memory", required=true)
    private Output<Integer> memory;

    /**
     * @return The VGA memory in megabytes (defaults to `16`).
     * 
     */
    public Output<Integer> memory() {
        return this.memory;
    }

    /**
     * The NUMA policy (defaults to `preferred`).
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return The NUMA policy (defaults to `preferred`).
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    private VirtualMachineNumaArgs() {}

    private VirtualMachineNumaArgs(VirtualMachineNumaArgs $) {
        this.cpus = $.cpus;
        this.device = $.device;
        this.hostnodes = $.hostnodes;
        this.memory = $.memory;
        this.policy = $.policy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineNumaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineNumaArgs $;

        public Builder() {
            $ = new VirtualMachineNumaArgs();
        }

        public Builder(VirtualMachineNumaArgs defaults) {
            $ = new VirtualMachineNumaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cpus The CPU cores to assign to the NUMA node (format is `0-7;16-31`).
         * 
         * @return builder
         * 
         */
        public Builder cpus(Output<String> cpus) {
            $.cpus = cpus;
            return this;
        }

        /**
         * @param cpus The CPU cores to assign to the NUMA node (format is `0-7;16-31`).
         * 
         * @return builder
         * 
         */
        public Builder cpus(String cpus) {
            return cpus(Output.of(cpus));
        }

        /**
         * @param device The device (defaults to `socket`).
         * - `/dev/*` - A host serial device.
         * 
         * @return builder
         * 
         */
        public Builder device(Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device The device (defaults to `socket`).
         * - `/dev/*` - A host serial device.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param hostnodes The NUMA host nodes.
         * 
         * @return builder
         * 
         */
        public Builder hostnodes(@Nullable Output<String> hostnodes) {
            $.hostnodes = hostnodes;
            return this;
        }

        /**
         * @param hostnodes The NUMA host nodes.
         * 
         * @return builder
         * 
         */
        public Builder hostnodes(String hostnodes) {
            return hostnodes(Output.of(hostnodes));
        }

        /**
         * @param memory The VGA memory in megabytes (defaults to `16`).
         * 
         * @return builder
         * 
         */
        public Builder memory(Output<Integer> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The VGA memory in megabytes (defaults to `16`).
         * 
         * @return builder
         * 
         */
        public Builder memory(Integer memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param policy The NUMA policy (defaults to `preferred`).
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy The NUMA policy (defaults to `preferred`).
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        public VirtualMachineNumaArgs build() {
            if ($.cpus == null) {
                throw new MissingRequiredPropertyException("VirtualMachineNumaArgs", "cpus");
            }
            if ($.device == null) {
                throw new MissingRequiredPropertyException("VirtualMachineNumaArgs", "device");
            }
            if ($.memory == null) {
                throw new MissingRequiredPropertyException("VirtualMachineNumaArgs", "memory");
            }
            return $;
        }
    }

}
