// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Apt.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRepositoryResult {
    /**
     * @return The associated comment.
     * 
     */
    private String comment;
    /**
     * @return The list of components.
     * 
     */
    private List<String> components;
    /**
     * @return Indicates the activation status.
     * 
     */
    private Boolean enabled;
    /**
     * @return The absolute path of the source list file that contains this repository.
     * 
     */
    private String filePath;
    /**
     * @return The format of the defining source list file.
     * 
     */
    private String fileType;
    /**
     * @return The unique identifier of this APT repository data source.
     * 
     */
    private String id;
    /**
     * @return The index within the defining source list file.
     * 
     */
    private Integer index;
    /**
     * @return The name of the target Proxmox VE node.
     * 
     */
    private String node;
    /**
     * @return The list of package types.
     * 
     */
    private List<String> packageTypes;
    /**
     * @return The list of package distributions.
     * 
     */
    private List<String> suites;
    /**
     * @return The list of repository URIs.
     * 
     */
    private List<String> uris;

    private GetRepositoryResult() {}
    /**
     * @return The associated comment.
     * 
     */
    public String comment() {
        return this.comment;
    }
    /**
     * @return The list of components.
     * 
     */
    public List<String> components() {
        return this.components;
    }
    /**
     * @return Indicates the activation status.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The absolute path of the source list file that contains this repository.
     * 
     */
    public String filePath() {
        return this.filePath;
    }
    /**
     * @return The format of the defining source list file.
     * 
     */
    public String fileType() {
        return this.fileType;
    }
    /**
     * @return The unique identifier of this APT repository data source.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The index within the defining source list file.
     * 
     */
    public Integer index() {
        return this.index;
    }
    /**
     * @return The name of the target Proxmox VE node.
     * 
     */
    public String node() {
        return this.node;
    }
    /**
     * @return The list of package types.
     * 
     */
    public List<String> packageTypes() {
        return this.packageTypes;
    }
    /**
     * @return The list of package distributions.
     * 
     */
    public List<String> suites() {
        return this.suites;
    }
    /**
     * @return The list of repository URIs.
     * 
     */
    public List<String> uris() {
        return this.uris;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String comment;
        private List<String> components;
        private Boolean enabled;
        private String filePath;
        private String fileType;
        private String id;
        private Integer index;
        private String node;
        private List<String> packageTypes;
        private List<String> suites;
        private List<String> uris;
        public Builder() {}
        public Builder(GetRepositoryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comment = defaults.comment;
    	      this.components = defaults.components;
    	      this.enabled = defaults.enabled;
    	      this.filePath = defaults.filePath;
    	      this.fileType = defaults.fileType;
    	      this.id = defaults.id;
    	      this.index = defaults.index;
    	      this.node = defaults.node;
    	      this.packageTypes = defaults.packageTypes;
    	      this.suites = defaults.suites;
    	      this.uris = defaults.uris;
        }

        @CustomType.Setter
        public Builder comment(String comment) {
            if (comment == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "comment");
            }
            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder components(List<String> components) {
            if (components == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "components");
            }
            this.components = components;
            return this;
        }
        public Builder components(String... components) {
            return components(List.of(components));
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder filePath(String filePath) {
            if (filePath == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "filePath");
            }
            this.filePath = filePath;
            return this;
        }
        @CustomType.Setter
        public Builder fileType(String fileType) {
            if (fileType == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "fileType");
            }
            this.fileType = fileType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder index(Integer index) {
            if (index == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "index");
            }
            this.index = index;
            return this;
        }
        @CustomType.Setter
        public Builder node(String node) {
            if (node == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "node");
            }
            this.node = node;
            return this;
        }
        @CustomType.Setter
        public Builder packageTypes(List<String> packageTypes) {
            if (packageTypes == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "packageTypes");
            }
            this.packageTypes = packageTypes;
            return this;
        }
        public Builder packageTypes(String... packageTypes) {
            return packageTypes(List.of(packageTypes));
        }
        @CustomType.Setter
        public Builder suites(List<String> suites) {
            if (suites == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "suites");
            }
            this.suites = suites;
            return this;
        }
        public Builder suites(String... suites) {
            return suites(List.of(suites));
        }
        @CustomType.Setter
        public Builder uris(List<String> uris) {
            if (uris == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "uris");
            }
            this.uris = uris;
            return this;
        }
        public Builder uris(String... uris) {
            return uris(List.of(uris));
        }
        public GetRepositoryResult build() {
            final var _resultValue = new GetRepositoryResult();
            _resultValue.comment = comment;
            _resultValue.components = components;
            _resultValue.enabled = enabled;
            _resultValue.filePath = filePath;
            _resultValue.fileType = fileType;
            _resultValue.id = id;
            _resultValue.index = index;
            _resultValue.node = node;
            _resultValue.packageTypes = packageTypes;
            _resultValue.suites = suites;
            _resultValue.uris = uris;
            return _resultValue;
        }
    }
}
