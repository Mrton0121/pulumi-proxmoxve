// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Apt.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryState extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryState Empty = new RepositoryState();

    /**
     * The associated comment.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return The associated comment.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The list of components.
     * 
     */
    @Import(name="components")
    private @Nullable Output<List<String>> components;

    /**
     * @return The list of components.
     * 
     */
    public Optional<Output<List<String>>> components() {
        return Optional.ofNullable(this.components);
    }

    /**
     * Indicates the activation status.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Indicates the activation status.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The absolute path of the source list file that contains this repository.
     * 
     */
    @Import(name="filePath")
    private @Nullable Output<String> filePath;

    /**
     * @return The absolute path of the source list file that contains this repository.
     * 
     */
    public Optional<Output<String>> filePath() {
        return Optional.ofNullable(this.filePath);
    }

    /**
     * The format of the defining source list file.
     * 
     */
    @Import(name="fileType")
    private @Nullable Output<String> fileType;

    /**
     * @return The format of the defining source list file.
     * 
     */
    public Optional<Output<String>> fileType() {
        return Optional.ofNullable(this.fileType);
    }

    /**
     * The index within the defining source list file.
     * 
     */
    @Import(name="index")
    private @Nullable Output<Integer> index;

    /**
     * @return The index within the defining source list file.
     * 
     */
    public Optional<Output<Integer>> index() {
        return Optional.ofNullable(this.index);
    }

    /**
     * The name of the target Proxmox VE node.
     * 
     */
    @Import(name="node")
    private @Nullable Output<String> node;

    /**
     * @return The name of the target Proxmox VE node.
     * 
     */
    public Optional<Output<String>> node() {
        return Optional.ofNullable(this.node);
    }

    /**
     * The list of package types.
     * 
     */
    @Import(name="packageTypes")
    private @Nullable Output<List<String>> packageTypes;

    /**
     * @return The list of package types.
     * 
     */
    public Optional<Output<List<String>>> packageTypes() {
        return Optional.ofNullable(this.packageTypes);
    }

    /**
     * The list of package distributions.
     * 
     */
    @Import(name="suites")
    private @Nullable Output<List<String>> suites;

    /**
     * @return The list of package distributions.
     * 
     */
    public Optional<Output<List<String>>> suites() {
        return Optional.ofNullable(this.suites);
    }

    /**
     * The list of repository URIs.
     * 
     */
    @Import(name="uris")
    private @Nullable Output<List<String>> uris;

    /**
     * @return The list of repository URIs.
     * 
     */
    public Optional<Output<List<String>>> uris() {
        return Optional.ofNullable(this.uris);
    }

    private RepositoryState() {}

    private RepositoryState(RepositoryState $) {
        this.comment = $.comment;
        this.components = $.components;
        this.enabled = $.enabled;
        this.filePath = $.filePath;
        this.fileType = $.fileType;
        this.index = $.index;
        this.node = $.node;
        this.packageTypes = $.packageTypes;
        this.suites = $.suites;
        this.uris = $.uris;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryState $;

        public Builder() {
            $ = new RepositoryState();
        }

        public Builder(RepositoryState defaults) {
            $ = new RepositoryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment The associated comment.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment The associated comment.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param components The list of components.
         * 
         * @return builder
         * 
         */
        public Builder components(@Nullable Output<List<String>> components) {
            $.components = components;
            return this;
        }

        /**
         * @param components The list of components.
         * 
         * @return builder
         * 
         */
        public Builder components(List<String> components) {
            return components(Output.of(components));
        }

        /**
         * @param components The list of components.
         * 
         * @return builder
         * 
         */
        public Builder components(String... components) {
            return components(List.of(components));
        }

        /**
         * @param enabled Indicates the activation status.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Indicates the activation status.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param filePath The absolute path of the source list file that contains this repository.
         * 
         * @return builder
         * 
         */
        public Builder filePath(@Nullable Output<String> filePath) {
            $.filePath = filePath;
            return this;
        }

        /**
         * @param filePath The absolute path of the source list file that contains this repository.
         * 
         * @return builder
         * 
         */
        public Builder filePath(String filePath) {
            return filePath(Output.of(filePath));
        }

        /**
         * @param fileType The format of the defining source list file.
         * 
         * @return builder
         * 
         */
        public Builder fileType(@Nullable Output<String> fileType) {
            $.fileType = fileType;
            return this;
        }

        /**
         * @param fileType The format of the defining source list file.
         * 
         * @return builder
         * 
         */
        public Builder fileType(String fileType) {
            return fileType(Output.of(fileType));
        }

        /**
         * @param index The index within the defining source list file.
         * 
         * @return builder
         * 
         */
        public Builder index(@Nullable Output<Integer> index) {
            $.index = index;
            return this;
        }

        /**
         * @param index The index within the defining source list file.
         * 
         * @return builder
         * 
         */
        public Builder index(Integer index) {
            return index(Output.of(index));
        }

        /**
         * @param node The name of the target Proxmox VE node.
         * 
         * @return builder
         * 
         */
        public Builder node(@Nullable Output<String> node) {
            $.node = node;
            return this;
        }

        /**
         * @param node The name of the target Proxmox VE node.
         * 
         * @return builder
         * 
         */
        public Builder node(String node) {
            return node(Output.of(node));
        }

        /**
         * @param packageTypes The list of package types.
         * 
         * @return builder
         * 
         */
        public Builder packageTypes(@Nullable Output<List<String>> packageTypes) {
            $.packageTypes = packageTypes;
            return this;
        }

        /**
         * @param packageTypes The list of package types.
         * 
         * @return builder
         * 
         */
        public Builder packageTypes(List<String> packageTypes) {
            return packageTypes(Output.of(packageTypes));
        }

        /**
         * @param packageTypes The list of package types.
         * 
         * @return builder
         * 
         */
        public Builder packageTypes(String... packageTypes) {
            return packageTypes(List.of(packageTypes));
        }

        /**
         * @param suites The list of package distributions.
         * 
         * @return builder
         * 
         */
        public Builder suites(@Nullable Output<List<String>> suites) {
            $.suites = suites;
            return this;
        }

        /**
         * @param suites The list of package distributions.
         * 
         * @return builder
         * 
         */
        public Builder suites(List<String> suites) {
            return suites(Output.of(suites));
        }

        /**
         * @param suites The list of package distributions.
         * 
         * @return builder
         * 
         */
        public Builder suites(String... suites) {
            return suites(List.of(suites));
        }

        /**
         * @param uris The list of repository URIs.
         * 
         * @return builder
         * 
         */
        public Builder uris(@Nullable Output<List<String>> uris) {
            $.uris = uris;
            return this;
        }

        /**
         * @param uris The list of repository URIs.
         * 
         * @return builder
         * 
         */
        public Builder uris(List<String> uris) {
            return uris(Output.of(uris));
        }

        /**
         * @param uris The list of repository URIs.
         * 
         * @return builder
         * 
         */
        public Builder uris(String... uris) {
            return uris(List.of(uris));
        }

        public RepositoryState build() {
            return $;
        }
    }

}
