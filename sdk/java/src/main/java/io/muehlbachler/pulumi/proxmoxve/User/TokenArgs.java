// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.User;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final TokenArgs Empty = new TokenArgs();

    /**
     * Comment for the token.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Comment for the token.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Expiration date for the token.
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return Expiration date for the token.
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.
     * 
     */
    @Import(name="privilegesSeparation")
    private @Nullable Output<Boolean> privilegesSeparation;

    /**
     * @return Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.
     * 
     */
    public Optional<Output<Boolean>> privilegesSeparation() {
        return Optional.ofNullable(this.privilegesSeparation);
    }

    /**
     * User-specific token identifier.
     * 
     */
    @Import(name="tokenName", required=true)
    private Output<String> tokenName;

    /**
     * @return User-specific token identifier.
     * 
     */
    public Output<String> tokenName() {
        return this.tokenName;
    }

    /**
     * User identifier.
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return User identifier.
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    private TokenArgs() {}

    private TokenArgs(TokenArgs $) {
        this.comment = $.comment;
        this.expirationDate = $.expirationDate;
        this.privilegesSeparation = $.privilegesSeparation;
        this.tokenName = $.tokenName;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TokenArgs $;

        public Builder() {
            $ = new TokenArgs();
        }

        public Builder(TokenArgs defaults) {
            $ = new TokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment Comment for the token.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Comment for the token.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param expirationDate Expiration date for the token.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate Expiration date for the token.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param privilegesSeparation Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.
         * 
         * @return builder
         * 
         */
        public Builder privilegesSeparation(@Nullable Output<Boolean> privilegesSeparation) {
            $.privilegesSeparation = privilegesSeparation;
            return this;
        }

        /**
         * @param privilegesSeparation Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.
         * 
         * @return builder
         * 
         */
        public Builder privilegesSeparation(Boolean privilegesSeparation) {
            return privilegesSeparation(Output.of(privilegesSeparation));
        }

        /**
         * @param tokenName User-specific token identifier.
         * 
         * @return builder
         * 
         */
        public Builder tokenName(Output<String> tokenName) {
            $.tokenName = tokenName;
            return this;
        }

        /**
         * @param tokenName User-specific token identifier.
         * 
         * @return builder
         * 
         */
        public Builder tokenName(String tokenName) {
            return tokenName(Output.of(tokenName));
        }

        /**
         * @param userId User identifier.
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId User identifier.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public TokenArgs build() {
            if ($.tokenName == null) {
                throw new MissingRequiredPropertyException("TokenArgs", "tokenName");
            }
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("TokenArgs", "userId");
            }
            return $;
        }
    }

}
