// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AclState extends com.pulumi.resources.ResourceArgs {

    public static final AclState Empty = new AclState();

    /**
     * The group the ACL should apply to (mutually exclusive with `token_id` and `user_id`)
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<String> groupId;

    /**
     * @return The group the ACL should apply to (mutually exclusive with `token_id` and `user_id`)
     * 
     */
    public Optional<Output<String>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * Access control path
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Access control path
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Allow to propagate (inherit) permissions.
     * 
     */
    @Import(name="propagate")
    private @Nullable Output<Boolean> propagate;

    /**
     * @return Allow to propagate (inherit) permissions.
     * 
     */
    public Optional<Output<Boolean>> propagate() {
        return Optional.ofNullable(this.propagate);
    }

    /**
     * The role to apply
     * 
     */
    @Import(name="roleId")
    private @Nullable Output<String> roleId;

    /**
     * @return The role to apply
     * 
     */
    public Optional<Output<String>> roleId() {
        return Optional.ofNullable(this.roleId);
    }

    /**
     * The token the ACL should apply to (mutually exclusive with `group_id` and `user_id`)
     * 
     */
    @Import(name="tokenId")
    private @Nullable Output<String> tokenId;

    /**
     * @return The token the ACL should apply to (mutually exclusive with `group_id` and `user_id`)
     * 
     */
    public Optional<Output<String>> tokenId() {
        return Optional.ofNullable(this.tokenId);
    }

    /**
     * The user the ACL should apply to (mutually exclusive with `group_id` and `token_id`)
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return The user the ACL should apply to (mutually exclusive with `group_id` and `token_id`)
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private AclState() {}

    private AclState(AclState $) {
        this.groupId = $.groupId;
        this.path = $.path;
        this.propagate = $.propagate;
        this.roleId = $.roleId;
        this.tokenId = $.tokenId;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AclState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AclState $;

        public Builder() {
            $ = new AclState();
        }

        public Builder(AclState defaults) {
            $ = new AclState(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupId The group the ACL should apply to (mutually exclusive with `token_id` and `user_id`)
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The group the ACL should apply to (mutually exclusive with `token_id` and `user_id`)
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param path Access control path
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Access control path
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param propagate Allow to propagate (inherit) permissions.
         * 
         * @return builder
         * 
         */
        public Builder propagate(@Nullable Output<Boolean> propagate) {
            $.propagate = propagate;
            return this;
        }

        /**
         * @param propagate Allow to propagate (inherit) permissions.
         * 
         * @return builder
         * 
         */
        public Builder propagate(Boolean propagate) {
            return propagate(Output.of(propagate));
        }

        /**
         * @param roleId The role to apply
         * 
         * @return builder
         * 
         */
        public Builder roleId(@Nullable Output<String> roleId) {
            $.roleId = roleId;
            return this;
        }

        /**
         * @param roleId The role to apply
         * 
         * @return builder
         * 
         */
        public Builder roleId(String roleId) {
            return roleId(Output.of(roleId));
        }

        /**
         * @param tokenId The token the ACL should apply to (mutually exclusive with `group_id` and `user_id`)
         * 
         * @return builder
         * 
         */
        public Builder tokenId(@Nullable Output<String> tokenId) {
            $.tokenId = tokenId;
            return this;
        }

        /**
         * @param tokenId The token the ACL should apply to (mutually exclusive with `group_id` and `user_id`)
         * 
         * @return builder
         * 
         */
        public Builder tokenId(String tokenId) {
            return tokenId(Output.of(tokenId));
        }

        /**
         * @param userId The user the ACL should apply to (mutually exclusive with `group_id` and `token_id`)
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The user the ACL should apply to (mutually exclusive with `group_id` and `token_id`)
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public AclState build() {
            return $;
        }
    }

}
