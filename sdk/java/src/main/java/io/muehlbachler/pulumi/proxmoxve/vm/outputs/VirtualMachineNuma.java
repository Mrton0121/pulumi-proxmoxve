// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.VM.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualMachineNuma {
    /**
     * @return The CPU cores to assign to the NUMA node (format is `0-7;16-31`).
     * 
     */
    private String cpus;
    /**
     * @return The device (defaults to `socket`).
     * - `/dev/*` - A host serial device.
     * 
     */
    private String device;
    /**
     * @return The NUMA host nodes.
     * 
     */
    private @Nullable String hostnodes;
    /**
     * @return The VGA memory in megabytes (defaults to `16`).
     * 
     */
    private Integer memory;
    /**
     * @return The NUMA policy (defaults to `preferred`).
     * 
     */
    private @Nullable String policy;

    private VirtualMachineNuma() {}
    /**
     * @return The CPU cores to assign to the NUMA node (format is `0-7;16-31`).
     * 
     */
    public String cpus() {
        return this.cpus;
    }
    /**
     * @return The device (defaults to `socket`).
     * - `/dev/*` - A host serial device.
     * 
     */
    public String device() {
        return this.device;
    }
    /**
     * @return The NUMA host nodes.
     * 
     */
    public Optional<String> hostnodes() {
        return Optional.ofNullable(this.hostnodes);
    }
    /**
     * @return The VGA memory in megabytes (defaults to `16`).
     * 
     */
    public Integer memory() {
        return this.memory;
    }
    /**
     * @return The NUMA policy (defaults to `preferred`).
     * 
     */
    public Optional<String> policy() {
        return Optional.ofNullable(this.policy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineNuma defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cpus;
        private String device;
        private @Nullable String hostnodes;
        private Integer memory;
        private @Nullable String policy;
        public Builder() {}
        public Builder(VirtualMachineNuma defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cpus = defaults.cpus;
    	      this.device = defaults.device;
    	      this.hostnodes = defaults.hostnodes;
    	      this.memory = defaults.memory;
    	      this.policy = defaults.policy;
        }

        @CustomType.Setter
        public Builder cpus(String cpus) {
            if (cpus == null) {
              throw new MissingRequiredPropertyException("VirtualMachineNuma", "cpus");
            }
            this.cpus = cpus;
            return this;
        }
        @CustomType.Setter
        public Builder device(String device) {
            if (device == null) {
              throw new MissingRequiredPropertyException("VirtualMachineNuma", "device");
            }
            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder hostnodes(@Nullable String hostnodes) {

            this.hostnodes = hostnodes;
            return this;
        }
        @CustomType.Setter
        public Builder memory(Integer memory) {
            if (memory == null) {
              throw new MissingRequiredPropertyException("VirtualMachineNuma", "memory");
            }
            this.memory = memory;
            return this;
        }
        @CustomType.Setter
        public Builder policy(@Nullable String policy) {

            this.policy = policy;
            return this;
        }
        public VirtualMachineNuma build() {
            final var _resultValue = new VirtualMachineNuma();
            _resultValue.cpus = cpus;
            _resultValue.device = device;
            _resultValue.hostnodes = hostnodes;
            _resultValue.memory = memory;
            _resultValue.policy = policy;
            return _resultValue;
        }
    }
}
