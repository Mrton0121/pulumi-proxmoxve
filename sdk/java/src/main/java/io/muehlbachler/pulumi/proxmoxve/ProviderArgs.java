// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.muehlbachler.pulumi.proxmoxve.inputs.ProviderSshArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * The API token for the Proxmox VE API.
     * 
     */
    @Import(name="apiToken")
    private @Nullable Output<String> apiToken;

    /**
     * @return The API token for the Proxmox VE API.
     * 
     */
    public Optional<Output<String>> apiToken() {
        return Optional.ofNullable(this.apiToken);
    }

    /**
     * The pre-authenticated Ticket for the Proxmox VE API.
     * 
     */
    @Import(name="authTicket")
    private @Nullable Output<String> authTicket;

    /**
     * @return The pre-authenticated Ticket for the Proxmox VE API.
     * 
     */
    public Optional<Output<String>> authTicket() {
        return Optional.ofNullable(this.authTicket);
    }

    /**
     * The pre-authenticated CSRF Prevention Token for the Proxmox VE API.
     * 
     */
    @Import(name="csrfPreventionToken")
    private @Nullable Output<String> csrfPreventionToken;

    /**
     * @return The pre-authenticated CSRF Prevention Token for the Proxmox VE API.
     * 
     */
    public Optional<Output<String>> csrfPreventionToken() {
        return Optional.ofNullable(this.csrfPreventionToken);
    }

    /**
     * The endpoint for the Proxmox VE API.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return The endpoint for the Proxmox VE API.
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * Whether to skip the TLS verification step.
     * 
     */
    @Import(name="insecure", json=true)
    private @Nullable Output<Boolean> insecure;

    /**
     * @return Whether to skip the TLS verification step.
     * 
     */
    public Optional<Output<Boolean>> insecure() {
        return Optional.ofNullable(this.insecure);
    }

    /**
     * The minimum required TLS version for API calls.Supported values: `1.0|1.1|1.2|1.3`. Defaults to `1.3`.
     * 
     */
    @Import(name="minTls")
    private @Nullable Output<String> minTls;

    /**
     * @return The minimum required TLS version for API calls.Supported values: `1.0|1.1|1.2|1.3`. Defaults to `1.3`.
     * 
     */
    public Optional<Output<String>> minTls() {
        return Optional.ofNullable(this.minTls);
    }

    /**
     * The one-time password for the Proxmox VE API.
     * 
     * @deprecated
     * The `otp` attribute is deprecated and will be removed in a future release. Please use the `api_token` attribute instead.
     * 
     */
    @Deprecated /* The `otp` attribute is deprecated and will be removed in a future release. Please use the `api_token` attribute instead. */
    @Import(name="otp")
    private @Nullable Output<String> otp;

    /**
     * @return The one-time password for the Proxmox VE API.
     * 
     * @deprecated
     * The `otp` attribute is deprecated and will be removed in a future release. Please use the `api_token` attribute instead.
     * 
     */
    @Deprecated /* The `otp` attribute is deprecated and will be removed in a future release. Please use the `api_token` attribute instead. */
    public Optional<Output<String>> otp() {
        return Optional.ofNullable(this.otp);
    }

    /**
     * The password for the Proxmox VE API.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password for the Proxmox VE API.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The ending number for random VM / Container IDs.
     * 
     */
    @Import(name="randomVmIdEnd", json=true)
    private @Nullable Output<Integer> randomVmIdEnd;

    /**
     * @return The ending number for random VM / Container IDs.
     * 
     */
    public Optional<Output<Integer>> randomVmIdEnd() {
        return Optional.ofNullable(this.randomVmIdEnd);
    }

    /**
     * The starting number for random VM / Container IDs.
     * 
     */
    @Import(name="randomVmIdStart", json=true)
    private @Nullable Output<Integer> randomVmIdStart;

    /**
     * @return The starting number for random VM / Container IDs.
     * 
     */
    public Optional<Output<Integer>> randomVmIdStart() {
        return Optional.ofNullable(this.randomVmIdStart);
    }

    /**
     * Whether to generate random VM / Container IDs.
     * 
     */
    @Import(name="randomVmIds", json=true)
    private @Nullable Output<Boolean> randomVmIds;

    /**
     * @return Whether to generate random VM / Container IDs.
     * 
     */
    public Optional<Output<Boolean>> randomVmIds() {
        return Optional.ofNullable(this.randomVmIds);
    }

    /**
     * The SSH configuration for the Proxmox nodes.
     * 
     */
    @Import(name="ssh", json=true)
    private @Nullable Output<ProviderSshArgs> ssh;

    /**
     * @return The SSH configuration for the Proxmox nodes.
     * 
     */
    public Optional<Output<ProviderSshArgs>> ssh() {
        return Optional.ofNullable(this.ssh);
    }

    /**
     * The alternative temporary directory.
     * 
     */
    @Import(name="tmpDir")
    private @Nullable Output<String> tmpDir;

    /**
     * @return The alternative temporary directory.
     * 
     */
    public Optional<Output<String>> tmpDir() {
        return Optional.ofNullable(this.tmpDir);
    }

    /**
     * The username for the Proxmox VE API.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username for the Proxmox VE API.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.apiToken = $.apiToken;
        this.authTicket = $.authTicket;
        this.csrfPreventionToken = $.csrfPreventionToken;
        this.endpoint = $.endpoint;
        this.insecure = $.insecure;
        this.minTls = $.minTls;
        this.otp = $.otp;
        this.password = $.password;
        this.randomVmIdEnd = $.randomVmIdEnd;
        this.randomVmIdStart = $.randomVmIdStart;
        this.randomVmIds = $.randomVmIds;
        this.ssh = $.ssh;
        this.tmpDir = $.tmpDir;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiToken The API token for the Proxmox VE API.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(@Nullable Output<String> apiToken) {
            $.apiToken = apiToken;
            return this;
        }

        /**
         * @param apiToken The API token for the Proxmox VE API.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(String apiToken) {
            return apiToken(Output.of(apiToken));
        }

        /**
         * @param authTicket The pre-authenticated Ticket for the Proxmox VE API.
         * 
         * @return builder
         * 
         */
        public Builder authTicket(@Nullable Output<String> authTicket) {
            $.authTicket = authTicket;
            return this;
        }

        /**
         * @param authTicket The pre-authenticated Ticket for the Proxmox VE API.
         * 
         * @return builder
         * 
         */
        public Builder authTicket(String authTicket) {
            return authTicket(Output.of(authTicket));
        }

        /**
         * @param csrfPreventionToken The pre-authenticated CSRF Prevention Token for the Proxmox VE API.
         * 
         * @return builder
         * 
         */
        public Builder csrfPreventionToken(@Nullable Output<String> csrfPreventionToken) {
            $.csrfPreventionToken = csrfPreventionToken;
            return this;
        }

        /**
         * @param csrfPreventionToken The pre-authenticated CSRF Prevention Token for the Proxmox VE API.
         * 
         * @return builder
         * 
         */
        public Builder csrfPreventionToken(String csrfPreventionToken) {
            return csrfPreventionToken(Output.of(csrfPreventionToken));
        }

        /**
         * @param endpoint The endpoint for the Proxmox VE API.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The endpoint for the Proxmox VE API.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param insecure Whether to skip the TLS verification step.
         * 
         * @return builder
         * 
         */
        public Builder insecure(@Nullable Output<Boolean> insecure) {
            $.insecure = insecure;
            return this;
        }

        /**
         * @param insecure Whether to skip the TLS verification step.
         * 
         * @return builder
         * 
         */
        public Builder insecure(Boolean insecure) {
            return insecure(Output.of(insecure));
        }

        /**
         * @param minTls The minimum required TLS version for API calls.Supported values: `1.0|1.1|1.2|1.3`. Defaults to `1.3`.
         * 
         * @return builder
         * 
         */
        public Builder minTls(@Nullable Output<String> minTls) {
            $.minTls = minTls;
            return this;
        }

        /**
         * @param minTls The minimum required TLS version for API calls.Supported values: `1.0|1.1|1.2|1.3`. Defaults to `1.3`.
         * 
         * @return builder
         * 
         */
        public Builder minTls(String minTls) {
            return minTls(Output.of(minTls));
        }

        /**
         * @param otp The one-time password for the Proxmox VE API.
         * 
         * @return builder
         * 
         * @deprecated
         * The `otp` attribute is deprecated and will be removed in a future release. Please use the `api_token` attribute instead.
         * 
         */
        @Deprecated /* The `otp` attribute is deprecated and will be removed in a future release. Please use the `api_token` attribute instead. */
        public Builder otp(@Nullable Output<String> otp) {
            $.otp = otp;
            return this;
        }

        /**
         * @param otp The one-time password for the Proxmox VE API.
         * 
         * @return builder
         * 
         * @deprecated
         * The `otp` attribute is deprecated and will be removed in a future release. Please use the `api_token` attribute instead.
         * 
         */
        @Deprecated /* The `otp` attribute is deprecated and will be removed in a future release. Please use the `api_token` attribute instead. */
        public Builder otp(String otp) {
            return otp(Output.of(otp));
        }

        /**
         * @param password The password for the Proxmox VE API.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password for the Proxmox VE API.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param randomVmIdEnd The ending number for random VM / Container IDs.
         * 
         * @return builder
         * 
         */
        public Builder randomVmIdEnd(@Nullable Output<Integer> randomVmIdEnd) {
            $.randomVmIdEnd = randomVmIdEnd;
            return this;
        }

        /**
         * @param randomVmIdEnd The ending number for random VM / Container IDs.
         * 
         * @return builder
         * 
         */
        public Builder randomVmIdEnd(Integer randomVmIdEnd) {
            return randomVmIdEnd(Output.of(randomVmIdEnd));
        }

        /**
         * @param randomVmIdStart The starting number for random VM / Container IDs.
         * 
         * @return builder
         * 
         */
        public Builder randomVmIdStart(@Nullable Output<Integer> randomVmIdStart) {
            $.randomVmIdStart = randomVmIdStart;
            return this;
        }

        /**
         * @param randomVmIdStart The starting number for random VM / Container IDs.
         * 
         * @return builder
         * 
         */
        public Builder randomVmIdStart(Integer randomVmIdStart) {
            return randomVmIdStart(Output.of(randomVmIdStart));
        }

        /**
         * @param randomVmIds Whether to generate random VM / Container IDs.
         * 
         * @return builder
         * 
         */
        public Builder randomVmIds(@Nullable Output<Boolean> randomVmIds) {
            $.randomVmIds = randomVmIds;
            return this;
        }

        /**
         * @param randomVmIds Whether to generate random VM / Container IDs.
         * 
         * @return builder
         * 
         */
        public Builder randomVmIds(Boolean randomVmIds) {
            return randomVmIds(Output.of(randomVmIds));
        }

        /**
         * @param ssh The SSH configuration for the Proxmox nodes.
         * 
         * @return builder
         * 
         */
        public Builder ssh(@Nullable Output<ProviderSshArgs> ssh) {
            $.ssh = ssh;
            return this;
        }

        /**
         * @param ssh The SSH configuration for the Proxmox nodes.
         * 
         * @return builder
         * 
         */
        public Builder ssh(ProviderSshArgs ssh) {
            return ssh(Output.of(ssh));
        }

        /**
         * @param tmpDir The alternative temporary directory.
         * 
         * @return builder
         * 
         */
        public Builder tmpDir(@Nullable Output<String> tmpDir) {
            $.tmpDir = tmpDir;
            return this;
        }

        /**
         * @param tmpDir The alternative temporary directory.
         * 
         * @return builder
         * 
         */
        public Builder tmpDir(String tmpDir) {
            return tmpDir(Output.of(tmpDir));
        }

        /**
         * @param username The username for the Proxmox VE API.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username for the Proxmox VE API.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ProviderArgs build() {
            return $;
        }
    }

}
