// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetVm2Cpu extends com.pulumi.resources.InvokeArgs {

    public static final GetVm2Cpu Empty = new GetVm2Cpu();

    /**
     * List of host cores used to execute guest processes, for example: &#39;0,5,8-11&#39;
     * 
     */
    @Import(name="affinity", required=true)
    private String affinity;

    /**
     * @return List of host cores used to execute guest processes, for example: &#39;0,5,8-11&#39;
     * 
     */
    public String affinity() {
        return this.affinity;
    }

    /**
     * The CPU architecture.
     * 
     */
    @Import(name="architecture", required=true)
    private String architecture;

    /**
     * @return The CPU architecture.
     * 
     */
    public String architecture() {
        return this.architecture;
    }

    /**
     * The number of CPU cores per socket.
     * 
     */
    @Import(name="cores", required=true)
    private Integer cores;

    /**
     * @return The number of CPU cores per socket.
     * 
     */
    public Integer cores() {
        return this.cores;
    }

    /**
     * Set of additional CPU flags.
     * 
     */
    @Import(name="flags", required=true)
    private List<String> flags;

    /**
     * @return Set of additional CPU flags.
     * 
     */
    public List<String> flags() {
        return this.flags;
    }

    /**
     * The number of hotplugged vCPUs.
     * 
     */
    @Import(name="hotplugged", required=true)
    private Integer hotplugged;

    /**
     * @return The number of hotplugged vCPUs.
     * 
     */
    public Integer hotplugged() {
        return this.hotplugged;
    }

    /**
     * Limit of CPU usage.
     * 
     */
    @Import(name="limit", required=true)
    private Integer limit;

    /**
     * @return Limit of CPU usage.
     * 
     */
    public Integer limit() {
        return this.limit;
    }

    /**
     * Enable NUMA.
     * 
     */
    @Import(name="numa", required=true)
    private Boolean numa;

    /**
     * @return Enable NUMA.
     * 
     */
    public Boolean numa() {
        return this.numa;
    }

    /**
     * The number of CPU sockets.
     * 
     */
    @Import(name="sockets", required=true)
    private Integer sockets;

    /**
     * @return The number of CPU sockets.
     * 
     */
    public Integer sockets() {
        return this.sockets;
    }

    /**
     * Emulated CPU type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Emulated CPU type.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * CPU weight for a VM
     * 
     */
    @Import(name="units", required=true)
    private Integer units;

    /**
     * @return CPU weight for a VM
     * 
     */
    public Integer units() {
        return this.units;
    }

    private GetVm2Cpu() {}

    private GetVm2Cpu(GetVm2Cpu $) {
        this.affinity = $.affinity;
        this.architecture = $.architecture;
        this.cores = $.cores;
        this.flags = $.flags;
        this.hotplugged = $.hotplugged;
        this.limit = $.limit;
        this.numa = $.numa;
        this.sockets = $.sockets;
        this.type = $.type;
        this.units = $.units;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVm2Cpu defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVm2Cpu $;

        public Builder() {
            $ = new GetVm2Cpu();
        }

        public Builder(GetVm2Cpu defaults) {
            $ = new GetVm2Cpu(Objects.requireNonNull(defaults));
        }

        /**
         * @param affinity List of host cores used to execute guest processes, for example: &#39;0,5,8-11&#39;
         * 
         * @return builder
         * 
         */
        public Builder affinity(String affinity) {
            $.affinity = affinity;
            return this;
        }

        /**
         * @param architecture The CPU architecture.
         * 
         * @return builder
         * 
         */
        public Builder architecture(String architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param cores The number of CPU cores per socket.
         * 
         * @return builder
         * 
         */
        public Builder cores(Integer cores) {
            $.cores = cores;
            return this;
        }

        /**
         * @param flags Set of additional CPU flags.
         * 
         * @return builder
         * 
         */
        public Builder flags(List<String> flags) {
            $.flags = flags;
            return this;
        }

        /**
         * @param flags Set of additional CPU flags.
         * 
         * @return builder
         * 
         */
        public Builder flags(String... flags) {
            return flags(List.of(flags));
        }

        /**
         * @param hotplugged The number of hotplugged vCPUs.
         * 
         * @return builder
         * 
         */
        public Builder hotplugged(Integer hotplugged) {
            $.hotplugged = hotplugged;
            return this;
        }

        /**
         * @param limit Limit of CPU usage.
         * 
         * @return builder
         * 
         */
        public Builder limit(Integer limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param numa Enable NUMA.
         * 
         * @return builder
         * 
         */
        public Builder numa(Boolean numa) {
            $.numa = numa;
            return this;
        }

        /**
         * @param sockets The number of CPU sockets.
         * 
         * @return builder
         * 
         */
        public Builder sockets(Integer sockets) {
            $.sockets = sockets;
            return this;
        }

        /**
         * @param type Emulated CPU type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param units CPU weight for a VM
         * 
         * @return builder
         * 
         */
        public Builder units(Integer units) {
            $.units = units;
            return this;
        }

        public GetVm2Cpu build() {
            if ($.affinity == null) {
                throw new MissingRequiredPropertyException("GetVm2Cpu", "affinity");
            }
            if ($.architecture == null) {
                throw new MissingRequiredPropertyException("GetVm2Cpu", "architecture");
            }
            if ($.cores == null) {
                throw new MissingRequiredPropertyException("GetVm2Cpu", "cores");
            }
            if ($.flags == null) {
                throw new MissingRequiredPropertyException("GetVm2Cpu", "flags");
            }
            if ($.hotplugged == null) {
                throw new MissingRequiredPropertyException("GetVm2Cpu", "hotplugged");
            }
            if ($.limit == null) {
                throw new MissingRequiredPropertyException("GetVm2Cpu", "limit");
            }
            if ($.numa == null) {
                throw new MissingRequiredPropertyException("GetVm2Cpu", "numa");
            }
            if ($.sockets == null) {
                throw new MissingRequiredPropertyException("GetVm2Cpu", "sockets");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetVm2Cpu", "type");
            }
            if ($.units == null) {
                throw new MissingRequiredPropertyException("GetVm2Cpu", "units");
            }
            return $;
        }
    }

}
